{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\elton\\\\Downloads\\\\GitHub\\\\portal-web-ufu-proj-pi\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _classCallCheck from\"C:\\\\Users\\\\elton\\\\Downloads\\\\GitHub\\\\portal-web-ufu-proj-pi\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";import _createClass from\"C:\\\\Users\\\\elton\\\\Downloads\\\\GitHub\\\\portal-web-ufu-proj-pi\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";import _inherits from\"C:\\\\Users\\\\elton\\\\Downloads\\\\GitHub\\\\portal-web-ufu-proj-pi\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";import _createSuper from\"C:\\\\Users\\\\elton\\\\Downloads\\\\GitHub\\\\portal-web-ufu-proj-pi\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";import React from'react';import instancedb from'../apis/instancedb';import ResultDisplayVagasOpts from'./resultDisplayVagasOpts';import{jsx as _jsx}from\"react/jsx-runtime\";var resultFetchVagas=/*#__PURE__*/function(_React$Component){_inherits(resultFetchVagas,_React$Component);var _super=_createSuper(resultFetchVagas);function resultFetchVagas(){var _this;_classCallCheck(this,resultFetchVagas);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={results:[]};return _this;}_createClass(resultFetchVagas,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;instancedb.get('/vagas.json').then(function(response){console.log(response.data);var fetchedResults=[];for(var key in response.data){fetchedResults.unshift(_objectSpread(_objectSpread({},response.data[key]),{},{id:key}));}_this2.setState({results:fetchedResults});});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"select\",{id:\"standard-select\",children:this.state.results.map(function(result){return/*#__PURE__*/_jsx(ResultDisplayVagasOpts,{tipo:result.tipo,area:result.area,empresa:result.empresa,local:result.local},result.id);})});}}]);return resultFetchVagas;}(React.Component);export default resultFetchVagas;","map":{"version":3,"sources":["C:/Users/elton/Downloads/GitHub/portal-web-ufu-proj-pi/src/components/resultFetchVagas.js"],"names":["React","instancedb","ResultDisplayVagasOpts","resultFetchVagas","state","results","get","then","response","console","log","data","fetchedResults","key","unshift","id","setState","map","result","tipo","area","empresa","local","Component"],"mappings":"kuBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,oBAAvB,CACA,MAAOC,CAAAA,sBAAP,KAAmC,0BAAnC,C,8CAEMC,CAAAA,gB,+WAEFC,K,CAAM,CACFC,OAAO,CAAC,EADN,C,6EAIN,4BAAmB,iBACfJ,UAAU,CAACK,GAAX,CAAe,aAAf,EACCC,IADD,CACM,SAAAC,QAAQ,CAAE,CACZC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB,EACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CACA,IAAI,GAAIC,CAAAA,GAAR,GAAeL,CAAAA,QAAQ,CAACG,IAAxB,CAA8B,CAC1BC,cAAc,CAACE,OAAf,gCAEWN,QAAQ,CAACG,IAAT,CAAcE,GAAd,CAFX,MAGQE,EAAE,CAACF,GAHX,IAMH,CACD,MAAI,CAACG,QAAL,CAAc,CAACX,OAAO,CAACO,cAAT,CAAd,EACH,CAbD,EAcH,C,sBAED,iBAAQ,CACJ,mBACI,eAAQ,EAAE,CAAC,iBAAX,UACK,KAAKR,KAAL,CAAWC,OAAX,CAAmBY,GAAnB,CAAuB,SAAAC,MAAM,qBAC1B,KAAC,sBAAD,EAEI,IAAI,CAAIA,MAAM,CAACC,IAFnB,CAGI,IAAI,CAAID,MAAM,CAACE,IAHnB,CAII,OAAO,CAAIF,MAAM,CAACG,OAJtB,CAKI,KAAK,CAAIH,MAAM,CAACI,KALpB,EACWJ,MAAM,CAACH,EADlB,CAD0B,EAA7B,CADL,EADJ,CAaH,C,8BArC0Bf,KAAK,CAACuB,S,EAyCrC,cAAepB,CAAAA,gBAAf","sourcesContent":["import React from 'react';\r\nimport instancedb from '../apis/instancedb';\r\nimport ResultDisplayVagasOpts from './resultDisplayVagasOpts';\r\n\r\nclass resultFetchVagas extends React.Component {\r\n\r\n    state={\r\n        results:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n        instancedb.get('/vagas.json')\r\n        .then(response=>{\r\n            console.log(response.data)\r\n            const fetchedResults = [];\r\n            for(let key in response.data) {\r\n                fetchedResults.unshift(\r\n                    {\r\n                        ...response.data[key],\r\n                        id:key\r\n                    }\r\n                )\r\n            }\r\n            this.setState({results:fetchedResults})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <select id=\"standard-select\">\r\n                {this.state.results.map(result =>(\r\n                    <ResultDisplayVagasOpts\r\n                        key = {result.id}\r\n                        tipo = {result.tipo}\r\n                        area = {result.area}\r\n                        empresa = {result.empresa}\r\n                        local = {result.local}\r\n                    />\r\n                ))}\r\n            </select>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default resultFetchVagas;"]},"metadata":{},"sourceType":"module"}